What are the 5 Cadence Programming Language Pillars?

Safety and Security is essential - Developers write code that would make the smart contracts reliable and secure i.e. 
create safeguards and close loop holes that make network and smart contracts vulnerable to attacks.  Cadence seperates user account from the smart contract. 

Clarity - Code needs to be unambiguous and concise. It should be in a linear format that provides the public with a clear understanding of what the code is
trying to accomplish and can be applicable to other smart contracts.  The code should be written to validate and verify the information that will be added 
to the block chain. 

It should be approachable i.e. it should be written is fashion that is similar to other object-oriented languages.

Cadence uses Resource smart contract language. Developers resources are unique data type. It makes sure the data can exist in one locatoin and 
cannot be copied or lost during the coding stage. Thad data is tied to the user's account and not the to the block chain 

Developer Experience if there are flaws or errors in the development or compilation of the code, there should be a clear way to debug them.
Security and safetey are important because it protects the integrity of the process.  If this is not provided, users would no longer trust 
in a process and could jeapordize movement towards a decentralized system.

Clarity is essential is making the code clear with verification and safety in mind helps maintain the public trust in the product that is being used.

Approcachability is also important because you want to continue to have developers to enhance the app and that is hard to do if the language is written 
in a way that is unfamilar or ambiguous.  In addition, as developers continue to improve the code, developers should write code that make it easy to debug 
errors within the code or logic.  This is essential becuase smart contract are immutable and high in value. 
